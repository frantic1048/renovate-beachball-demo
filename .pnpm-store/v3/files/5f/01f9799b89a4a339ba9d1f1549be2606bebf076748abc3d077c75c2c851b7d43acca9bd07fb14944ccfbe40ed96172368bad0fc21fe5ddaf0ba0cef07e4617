"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.performPublishOverrides = void 0;
const fs = __importStar(require("fs-extra"));
const acceptedKeys = [
    'types',
    'typings',
    'main',
    'module',
    'exports',
    'repository',
    'bin',
    'browser',
    'files',
];
const workspacePrefix = 'workspace:';
function performPublishOverrides(packagesToPublish, packageInfos) {
    for (const pkgName of packagesToPublish) {
        const info = packageInfos[pkgName];
        const packageJson = fs.readJSONSync(info.packageJsonPath);
        performWorkspaceVersionOverrides(packageJson, packageInfos);
        performPublishConfigOverrides(packageJson);
        fs.writeJSONSync(info.packageJsonPath, packageJson, { spaces: 2 });
    }
}
exports.performPublishOverrides = performPublishOverrides;
function performPublishConfigOverrides(packageJson) {
    // Everything in publishConfig in accepted keys here will get overridden & removed from the publishConfig section
    if (packageJson.publishConfig) {
        for (const [k, value] of Object.entries(packageJson.publishConfig)) {
            const key = k;
            if (acceptedKeys.includes(key)) {
                packageJson[key] = value;
                delete packageJson.publishConfig[key];
            }
        }
    }
}
/**
 * When dependencies are defined using workspace protocol they need to be replaced with a correct version during
 * publish. If publishing happened using a package manager that supports this protocol (pnpm/yarn) then it could
 * handle this replacement for us, but as of this time publishing only happens via npm, which can't do this
 * replacement.
 */
function performWorkspaceVersionOverrides(packageJson, packageInfos) {
    const { dependencies, devDependencies, peerDependencies } = packageJson;
    for (const deps of [dependencies, devDependencies, peerDependencies]) {
        if (!deps)
            continue;
        for (const [depName, depVersion] of Object.entries(deps)) {
            const packageInfo = packageInfos[depName];
            if (packageInfo && depVersion.startsWith(workspacePrefix)) {
                deps[depName] = resolveWorkspaceVersionForPublish(depVersion, packageInfo.version);
            }
        }
    }
}
/**
 * Resolves version for publishing following the replacements defined here:
 * https://pnpm.io/workspaces#workspace-protocol-workspace
 * https://yarnpkg.com/features/workspaces#publishing-workspaces
 */
function resolveWorkspaceVersionForPublish(workspaceDependency, packageInfoVersion) {
    const workspaceVersion = workspaceDependency.substring(workspacePrefix.length);
    if (workspaceVersion === '*') {
        return packageInfoVersion;
    }
    if (workspaceVersion === '^' || workspaceVersion === '~') {
        return `${workspaceVersion}${packageInfoVersion}`;
    }
    return workspaceVersion;
}
//# sourceMappingURL=performPublishOverrides.js.map