"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeChangeFiles = void 0;
const paths_1 = require("../paths");
const workspace_tools_1 = require("workspace-tools");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
/**
 * Loops through the `changes` and writes out a list of change files
 * @returns List of changefile paths, mainly for testing purposes.
 */
function writeChangeFiles(params) {
    const { changes, cwd, commitChangeFiles = true, groupChanges = false } = params;
    const changePath = (0, paths_1.getChangePath)(cwd);
    const branchName = (0, workspace_tools_1.getBranchName)(cwd);
    if (!(Object.keys(changes).length && branchName)) {
        return [];
    }
    if (!fs_extra_1.default.existsSync(changePath)) {
        fs_extra_1.default.mkdirpSync(changePath);
    }
    const getChangeFile = (prefix) => path_1.default.join(changePath, `${prefix}-${(0, uuid_1.v4)()}.json`);
    let changeFiles;
    if (groupChanges) {
        const changeFile = getChangeFile('change');
        changeFiles = [changeFile];
        fs_extra_1.default.writeFileSync(changeFile, JSON.stringify({ changes }, null, 2));
    }
    else {
        changeFiles = changes.map(change => {
            const changeFile = getChangeFile(change.packageName.replace(/[^a-zA-Z0-9@]/g, '-'));
            fs_extra_1.default.writeJSONSync(changeFile, change, { spaces: 2 });
            return changeFile;
        });
    }
    (0, workspace_tools_1.stage)(changeFiles, cwd);
    if (commitChangeFiles) {
        // only commit change files, ignore other staged files/changes
        const commitOptions = ['--only', path_1.default.join(changePath, '*.json')];
        (0, workspace_tools_1.commit)('Change files', cwd, commitOptions);
    }
    console.log(`git ${commitChangeFiles ? 'committed' : 'staged'} these change files: ${changeFiles
        .map(f => `\n - ${f}`)
        .join('')}`);
    return changeFiles;
}
exports.writeChangeFiles = writeChangeFiles;
//# sourceMappingURL=writeChangeFiles.js.map