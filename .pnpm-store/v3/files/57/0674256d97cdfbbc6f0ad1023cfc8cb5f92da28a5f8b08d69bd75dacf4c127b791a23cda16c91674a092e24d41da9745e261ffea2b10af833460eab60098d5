"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.canary = void 0;
const semver_1 = __importDefault(require("semver"));
const gatherBumpInfo_1 = require("../bump/gatherBumpInfo");
const performBump_1 = require("../bump/performBump");
const setDependentVersions_1 = require("../bump/setDependentVersions");
const getPackageInfos_1 = require("../monorepo/getPackageInfos");
const listPackageVersions_1 = require("../packageManager/listPackageVersions");
const publishToRegistry_1 = require("../publish/publishToRegistry");
async function canary(options) {
    const oldPackageInfo = (0, getPackageInfos_1.getPackageInfos)(options.path);
    const bumpInfo = (0, gatherBumpInfo_1.gatherBumpInfo)(options, oldPackageInfo);
    options.keepChangeFiles = true;
    options.generateChangelog = false;
    if (options.all) {
        for (const pkg of Object.keys(oldPackageInfo)) {
            bumpInfo.modifiedPackages.add(pkg);
        }
    }
    const packageVersions = await (0, listPackageVersions_1.listPackageVersions)([...bumpInfo.modifiedPackages], options);
    for (const pkg of bumpInfo.modifiedPackages) {
        let newVersion = oldPackageInfo[pkg].version;
        do {
            newVersion = semver_1.default.inc(newVersion, 'prerelease', options.canaryName || 'canary');
        } while (packageVersions[pkg].includes(newVersion));
        bumpInfo.packageInfos[pkg].version = newVersion;
    }
    (0, setDependentVersions_1.setDependentVersions)(bumpInfo.packageInfos, bumpInfo.scopedPackages, options);
    await (0, performBump_1.performBump)(bumpInfo, options);
    if (options.publish) {
        await (0, publishToRegistry_1.publishToRegistry)(bumpInfo, options);
    }
    else {
        console.log('Skipping publish');
    }
}
exports.canary = canary;
//# sourceMappingURL=canary.js.map