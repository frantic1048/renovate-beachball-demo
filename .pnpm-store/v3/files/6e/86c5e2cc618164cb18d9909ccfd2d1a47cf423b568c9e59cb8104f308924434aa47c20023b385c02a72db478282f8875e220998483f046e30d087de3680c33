"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tagPackages = void 0;
const generateTag_1 = require("../git/generateTag");
const workspace_tools_1 = require("workspace-tools");
function createTag(tag, cwd) {
    (0, workspace_tools_1.gitFailFast)(['tag', '-a', '-f', tag, '-m', tag], { cwd });
}
/**
 * Create git tags for each changed package, unless the package or repo has opted out of git tags.
 * Also, if git tags aren't disabled for the repo and the overall dist-tag (`options.tag`) has a
 * non-default value (not "latest"), create a git tag for the dist-tag.
 */
function tagPackages(bumpInfo, options) {
    const { gitTags, tag: distTag, path: cwd } = options;
    const { modifiedPackages, newPackages } = bumpInfo;
    for (const pkg of [...modifiedPackages, ...newPackages]) {
        const packageInfo = bumpInfo.packageInfos[pkg];
        const changeType = bumpInfo.calculatedChangeTypes[pkg];
        // Do not tag change type of "none", private packages, or packages opting out of tagging
        if (changeType === 'none' || packageInfo.private || !packageInfo.combinedOptions.gitTags) {
            continue;
        }
        console.log(`Tagging - ${packageInfo.name}@${packageInfo.version}`);
        const generatedTag = (0, generateTag_1.generateTag)(packageInfo.name, packageInfo.version);
        createTag(generatedTag, cwd);
    }
    if (gitTags && distTag && distTag !== 'latest') {
        console.log(`Tagging - ${distTag}`);
        createTag(distTag, cwd);
    }
}
exports.tagPackages = tagPackages;
//# sourceMappingURL=tagPackages.js.map