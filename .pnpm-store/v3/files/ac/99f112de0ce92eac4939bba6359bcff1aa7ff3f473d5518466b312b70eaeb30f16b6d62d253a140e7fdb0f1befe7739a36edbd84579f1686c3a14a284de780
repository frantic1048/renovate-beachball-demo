"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listPackageVersions = exports.listPackageVersionsByTag = exports._clearPackageVersionsCache = void 0;
const p_limit_1 = __importDefault(require("p-limit"));
const env_1 = require("../env");
const npm_1 = require("./npm");
const npmArgs_1 = require("./npmArgs");
let packageVersionsCache = {};
const NPM_CONCURRENCY = env_1.env.isJest ? 2 : 5;
function _clearPackageVersionsCache() {
    packageVersionsCache = {};
}
exports._clearPackageVersionsCache = _clearPackageVersionsCache;
async function getNpmPackageInfo(packageName, options) {
    const { registry, token, authType, timeout } = options;
    if (env_1.env.beachballDisableCache || !packageVersionsCache[packageName]) {
        const args = ['show', '--registry', registry, '--json', packageName, ...(0, npmArgs_1.getNpmAuthArgs)(registry, token, authType)];
        const showResult = await (0, npm_1.npm)(args, { timeout });
        if (showResult.success && showResult.stdout !== '') {
            const packageInfo = JSON.parse(showResult.stdout);
            packageVersionsCache[packageName] = packageInfo;
        }
        else {
            packageVersionsCache[packageName] = false;
        }
    }
    return packageVersionsCache[packageName];
}
async function listPackageVersionsByTag(packageInfos, tag, options) {
    const limit = (0, p_limit_1.default)(NPM_CONCURRENCY);
    const versions = {};
    await Promise.all(packageInfos.map(pkg => limit(async () => {
        const info = await getNpmPackageInfo(pkg.name, options);
        if (info) {
            const npmTag = tag || pkg.combinedOptions.tag || pkg.combinedOptions.defaultNpmTag;
            const version = npmTag && info['dist-tags']?.[npmTag];
            if (version) {
                versions[pkg.name] = version;
            }
        }
    })));
    return versions;
}
exports.listPackageVersionsByTag = listPackageVersionsByTag;
async function listPackageVersions(packageList, options) {
    const limit = (0, p_limit_1.default)(NPM_CONCURRENCY);
    const versions = {};
    await Promise.all(packageList.map(pkg => limit(async () => {
        const info = await getNpmPackageInfo(pkg, options);
        versions[pkg] = (info && info.versions) || [];
    })));
    return versions;
}
exports.listPackageVersions = listPackageVersions;
//# sourceMappingURL=listPackageVersions.js.map