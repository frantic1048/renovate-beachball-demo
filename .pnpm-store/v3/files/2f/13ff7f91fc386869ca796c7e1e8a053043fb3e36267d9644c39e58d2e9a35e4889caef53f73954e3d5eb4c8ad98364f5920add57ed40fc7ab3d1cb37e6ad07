"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderChangelog = exports.markerComment = void 0;
const renderPackageChangelog_1 = require("./renderPackageChangelog");
exports.markerComment = '<!-- Start content -->';
async function renderChangelog(renderOptions) {
    const { previousJson, previousContent = '', newVersionChangelog, isGrouped, changelogOptions: { renderPackageChangelog: customRenderPackageChangelog, customRenderers }, } = renderOptions;
    let previousLogEntries;
    if (previousContent.includes(exports.markerComment)) {
        // Preferably determine where the previous entries start based on a special comment
        previousLogEntries = previousContent.split(exports.markerComment, 2)[1].trim();
    }
    else {
        // Otherwise look for an h2 (used as version header with default renderer).
        // If that's not present, preserve the previous content as-is.
        const h2Match = previousContent.match(/^## /m);
        previousLogEntries = h2Match ? previousContent.substring(h2Match.index) : previousContent;
    }
    try {
        if (customRenderPackageChangelog || customRenderers) {
            console.log('Using custom renderer for package version changelog.');
        }
        const renderInfo = {
            previousJson,
            newVersionChangelog,
            isGrouped,
            renderers: {
                ...renderPackageChangelog_1.defaultRenderers,
                ...customRenderers,
            },
        };
        return ([
            `# Change Log - ${newVersionChangelog.name}`,
            `This log was last generated on ${newVersionChangelog.date.toUTCString()} and should not be manually modified.`,
            exports.markerComment,
            await (customRenderPackageChangelog || renderPackageChangelog_1.renderPackageChangelog)(renderInfo),
            previousLogEntries,
        ]
            .join('\n\n')
            .trim() + '\n');
    }
    catch (err) {
        console.log('Error occurred rendering package version changelog:', err);
        return '';
    }
}
exports.renderChangelog = renderChangelog;
//# sourceMappingURL=renderChangelog.js.map