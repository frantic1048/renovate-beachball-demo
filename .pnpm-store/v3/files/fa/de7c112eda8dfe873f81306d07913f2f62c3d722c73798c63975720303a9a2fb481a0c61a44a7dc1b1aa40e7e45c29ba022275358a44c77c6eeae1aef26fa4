"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMaxChangeType = exports.initializePackageChangeTypes = exports.MinChangeType = exports.SortedChangeTypes = void 0;
/**
 * List of all change types from least to most significant.
 */
exports.SortedChangeTypes = ['none', 'prerelease', 'patch', 'minor', 'major'];
/**
 * Change type with the smallest weight.
 */
exports.MinChangeType = exports.SortedChangeTypes[0];
/**
 * Change type weights.
 * Note: the order in which this is defined is IMPORTANT.
 */
const ChangeTypeWeights = Object.fromEntries(exports.SortedChangeTypes.map((t, i) => [t, i]));
/**
 * Get initial package change types based on the greatest change type set for each package in any
 * change file, accounting for any disallowed change types or nonexistent packages.
 */
function initializePackageChangeTypes(changeSet) {
    const pkgChangeTypes = {};
    for (const { change } of changeSet) {
        const { packageName: pkg, type } = change;
        pkgChangeTypes[pkg] = getMaxChangeType(type, pkgChangeTypes[pkg] || 'none', null);
    }
    return pkgChangeTypes;
}
exports.initializePackageChangeTypes = initializePackageChangeTypes;
function getAllowedChangeType(changeType, disallowedChangeTypes) {
    if (!changeType) {
        return 'none'; // this would be from invalid user input
    }
    while (disallowedChangeTypes.includes(changeType) && changeType !== 'none') {
        const nextChangeTypeWeight = ChangeTypeWeights[changeType] - 1;
        changeType = exports.SortedChangeTypes[nextChangeTypeWeight];
    }
    return changeType;
}
/**
 * Get the max allowed change type based on `a` and `b`, accounting for disallowed change types:
 * e.g. if `a` is "major" and `b` is "patch", and "major" is disallowed, the result will be "minor"
 * (the greatest allowed change type).
 */
function getMaxChangeType(a, b, disallowedChangeTypes) {
    if (disallowedChangeTypes) {
        a = getAllowedChangeType(a, disallowedChangeTypes);
        b = getAllowedChangeType(b, disallowedChangeTypes);
    }
    return ChangeTypeWeights[a] > ChangeTypeWeights[b] ? a : b;
}
exports.getMaxChangeType = getMaxChangeType;
//# sourceMappingURL=changeTypes.js.map