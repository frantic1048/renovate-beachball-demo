"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const workspace_tools_1 = require("workspace-tools");
const npm_1 = require("../packageManager/npm");
function errorExit(message) {
    console.error(message);
    console.log('You can still set up beachball manually by following the instructions here: https://microsoft.github.io/beachball/overview/getting-started.html');
    process.exit(1);
}
async function init(options) {
    let root;
    try {
        root = (0, workspace_tools_1.findProjectRoot)(options.path);
    }
    catch (err) {
        console.log('Please run this command on an existing repository root.');
        return;
    }
    const packageJsonFilePath = path.join(root, 'package.json');
    if (!fs.existsSync(packageJsonFilePath)) {
        errorExit(`Cannot find package.json at ${packageJsonFilePath}`);
    }
    const npmResult = await (0, npm_1.npm)(['info', 'beachball', '--json']);
    if (!npmResult.success) {
        errorExit('Failed to retrieve beachball version from npm');
    }
    let beachballVersion = '';
    try {
        const beachballInfo = JSON.parse(npmResult.stdout.toString());
        beachballVersion = beachballInfo['dist-tags'].latest;
    }
    catch (err) {
        errorExit("Couldn't parse beachball version from npm");
    }
    let packageJson = {};
    try {
        packageJson = fs.readJSONSync(packageJsonFilePath, 'utf-8');
    }
    catch (err) {
        errorExit(`Failed to read package.json at ${packageJsonFilePath}`);
    }
    packageJson.devDependencies ?? (packageJson.devDependencies = {});
    packageJson.devDependencies.beachball = beachballVersion;
    packageJson.scripts ?? (packageJson.scripts = {});
    packageJson.scripts.checkchange = 'beachball check';
    packageJson.scripts.change = 'beachball change';
    packageJson.scripts.release = 'beachball publish';
    fs.writeFileSync(packageJsonFilePath, JSON.stringify(packageJson, null, 2));
    if (!packageJson.repository) {
        console.warn('Please add a "repository" field to your repo root package.json so beachball always ' +
            'knows which remote to use when checking for changes.');
    }
    console.log('beachball has been initialized! Please run `yarn` or `npm install` to install beachball in your repo.');
}
exports.init = init;
//# sourceMappingURL=init.js.map